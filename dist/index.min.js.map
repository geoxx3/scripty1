{"version":3,"sources":["index.js"],"names":["express","require","mongoose","ejsMate","flash","dotenv","session","ExpressError","User","path","isLoggedIn","MongoDBStore","config","DB","process","env","DATABASE","connect","useNewUrlParser","helmet","useCreateIndex","useFindAndModify","then","console","log","db","connection","on","bind","once","app","useUnifiedTopology","join","__dirname","urlencoded","extended","use","secret","set","e","store","url","touchafter","cookie","httpOnly","expires","Date","now","sessionConfig","resave","saveUninitialized","passport","initialize","maxAge","LocalStrategy","authenticate","serializeUser","deserializeUser","req","res","next","user","locals","success","currentUser","error","render","userRoutes","get","listen"],"mappings":"aAIA,IAAMA,QAAUC,QAAQ,WAAlBD,QAAUC,QAAQ,YAElBC,SAAWD,QAAQ,YADnBE,QAAUF,QAAQ,mBAGlBG,MAAQH,QAAS,iBAFjBC,KAAQD,QAAGA,QAIXI,OAASJ,QAAQ,UAHjBK,SAAUL,QAAQ,YAKlBM,aAAeN,QAAQ,wBAJvBG,cAAiBH,QAAA,kBAMjBO,KAAOP,QAAS,iBALhBQ,OAAOR,QAAQ,mBAOAA,QAAQ,gBAAtBS,oBAAAA,WANDL,WAASJ,QAAQ,kBAQjBU,aAAeV,QAAQ,gBAARA,CAAyBK,SAE9CD,OAAOO,OAAO,CAAEH,KAAM,iBAEtB,IAAMI,GAAKC,QAAQC,IAAIC,UAAY,iCAEnCd,SAVAe,QAAahB,GAAAA,CAYTiB,iBAAiB,EAXfC,oBAAiB,EAanBC,gBAAgB,EAChBC,kBAbwB,IAezBC,KAAK,WAAA,OAAMC,QAAQC,IAAI,+BAE1B,IAAMC,GAAKvB,SAASwB,WAfpBD,GAAAE,GAAMhB,QAAAA,QAAeV,MAAQ2B,KAAAL,QAAR,sBAiBrBE,GAAGI,KAAK,OAAQ,WAfhBxB,QAAOO,IAAO,wBAEd,IAAQkB,IAAGhB,UAIPI,IAAAA,OAAAA,MAAef,SACf4B,IAAAA,IAAAA,cAAoB,OACpBX,IAAAA,IAAAA,QAAcX,KAHHuB,KAAAC,UAAA,WAAAH,IAMZR,IAAKtB,QAAAkC,WAAA,CAAAC,UAAA,KAAAL,IAAAM,IAAApC,QAAMuB,OAAYd,KAAAuB,KAAAC,UAAA,YAE1B,IAAQI,OAAGnC,QAASwB,IAAAA,QAApB,6BAEGG,MAAH,IAAgBlB,aAAM,CAClBY,IAAOV,GADXwB,OAAAA,OAIMP,WAAM9B,QAIZ8B,MAAIQ,GAAI,QAAS7B,SAAUwB,GAEvBG,QAAIpC,IAAQkC,sBAAWK,KAC3BT,IAAIM,cAAW,CAETC,MAAAA,MAEAG,KAAK,OACPC,OAAAA,OACAJ,QAAAA,EACAK,mBAAY,EAHhBC,OAAA,CAMAC,UAAkB,EAAlBC,QAAAC,KAAAC,MAAA,OAIMC,OAAAA,SAIFC,IAAAA,IAAM3C,QAJY0C,gBAKlBE,IAAAA,IAAAA,SAGIpB,IAAAM,IAAAe,SAAAC,cACAP,IAAAA,IAAAA,SAAavC,WACb+C,SAAAA,IAAQ,IAAAC,cAAA9C,KAAsB+C,iBAVhBJ,SAAtBK,cAAAhD,KAAAgD,iBAcA1B,SAAQxB,gBAAQ0C,KAAhBS,mBAWA3B,IAAIM,IAAI,SAACsB,EAAKC,EAAKC,GANfxB,EAAIe,OAAAA,YAARO,EAAAG,KACAV,EAAQW,OAAKC,QAAIT,EAAAA,MAAkB,WAEnCH,EAAQW,OAACN,MAAchD,EAAIJ,MAACoD,SAC5BL,MAIIQ,IAAAA,IAAIG,IAAOE,YAEXL,IAAAA,IAAIG,IAAOG,SAAAA,EAAXN,GACAC,EAAIM,OAAA,WAGRpC,IAAIM,IAAI,WAAK+B,SAAAA,EAAbR,GAEIS,EAAIF,OAAK,aAEZpC,IAFDsC,IAAA,WAAA,SAAAV,EAAAC,GAGIS,EAAIF,OAAA,aAEPpC,IAFDsC,IAAA,QAAA1D,WAAA,SAAAgD,EAAAC,GAGIS,EAAIF,OAAA,UAeRpC,IAAIsC,IAAI,QAAS,SAACV,EAAKC,GACnBA,EAAIO,OAAO,UAAXP,IAAAA,IAAIO,QAAO,SAAAR,EAAXC,GADJA,EAAAO,OAAA,UAKIP,IAAAA,IAAIO,IAAO,SAAAR,EAAXC,EAAAC,GADJA,EAAA,IAAArD,aAAA,iBAAA,QAaAuB,IAAIuC,OAAO,IAAM,WAAbA,QAAO7C,IAAX","file":"index.min.js","sourcesContent":["/* if (process.env.NODE_ENV !== \"production\") {\r\n    require('dotenv').config();\r\n} */\r\n\r\nconst express = require('express')\r\nconst ejsMate = require('ejs-mate')\r\nconst mongoose = require('mongoose')\r\nconst session = require('express-session')\r\nconst flash = require ('connect-flash')\r\nconst path = require('path')\r\nconst dotenv = require('dotenv')\r\nconst passport = require('passport')\r\nconst ExpressError = require('./utils/ExpressError');\r\nconst LocalStrategy = require('passport-local')\r\nconst User = require ('./models/user')\r\nconst helmet = require('helmet')\r\nconst {isLoggedIn} = require('./middleware')\r\nconst userRoutes = require('./routes/users')\r\nconst MongoDBStore = require(\"connect-mongo\")(session)\r\n\r\ndotenv.config({ path: './config.env' });\r\n\r\nconst DB = process.env.DATABASE || 'mongodb://localhost:27017/auth'\r\n\r\nmongoose\r\n  .connect(DB, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    useCreateIndex: true,\r\n    useFindAndModify: false\r\n  })\r\n  .then(() => console.log('DB connection successful!'));\r\n\r\nconst db = mongoose.connection;\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\ndb.once(\"open\", () => {\r\n    console.log(\"Database connected\");\r\n});\r\n\r\nconst app = express()\r\n\r\napp.engine('ejs', ejsMate)\r\napp.set('view engine', 'ejs')\r\napp.set('views', path.join(__dirname, '/views'))\r\n\r\napp.use(express.urlencoded({ extended: true }))\r\napp.use(express.static(path.join(__dirname, 'public')))\r\n\r\nconst secret = process.env.SECRET || 'thisshouldbeabettersecret!'\r\n\r\nconst store = new MongoDBStore({\r\n    url: DB,\r\n    secret,\r\n    touchafter: 24 * 60 *60\r\n})\r\n\r\nstore.on('error', function (e) {\r\n    console.log('SESSION STORE ERROR', e)\r\n})\r\n\r\nconst sessionConfig = {\r\n    store,\r\n    name: 'name',\r\n    secret,\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    cookie: {\r\n        httpOnly: true,\r\n        //secure: true,\r\n        expires: Date.now() + 1000 * 60 * 60 * 24 * 7,\r\n        maxAge: 1000 * 60 * 60 * 24 * 7\r\n    }\r\n}\r\n\r\napp.use(session(sessionConfig))\r\napp.use(flash());\r\n//app.use(helmet())\r\n\r\napp.use(passport.initialize());\r\napp.use(passport.session())\r\npassport.use(new LocalStrategy(User.authenticate()))\r\n\r\npassport.serializeUser(User.serializeUser())\r\npassport.deserializeUser(User.deserializeUser())\r\n\r\napp.use((req, res, next) => {\r\n   // console.log(req.session)\r\n    res.locals.currentUser = req.user;\r\n    res.locals.success = req.flash('success');\r\n    res.locals.error = req.flash('error');\r\n    next();\r\n})\r\n\r\napp.use('/', userRoutes)\r\n\r\napp.get('/', (req, res) => {\r\n    res.render('index') \r\n}) \r\napp.get('/pricing', (req, res) => {\r\n    res.render('pricing')\r\n}) \r\napp.get('/contact', (req, res) => {\r\n    res.render('contact')\r\n}) \r\napp.get('/user', isLoggedIn, (req, res) => {\r\n    res.render('user')\r\n}) \r\n\r\n/* app.get('/login', (req, res) => {\r\n    res.render('login')\r\n}) */\r\n\r\n/* app.get('/register', (req, res) => {\r\n    res.render('register')\r\n})  */\r\n\r\napp.get('/strl', (req, res) => {\r\n    res.render('strl')\r\n}) \r\n\r\napp.get('/strs', (req, res) => {\r\n    res.render('strs')\r\n})\r\napp.all('*', (req, res, next) => {\r\n    next(new ExpressError('Page Not Found', 404))\r\n})\r\n\r\n/* app.use((err, req, res, next) => {\r\n    const { statusCode = 500 } = err;\r\n    if (!err.message) err.message = 'Oh No, Something Went Wrong!'\r\n    res.status(statusCode).render('error', { err })\r\n})  */\r\n\r\napp.listen(5000, () => {\r\n    console.log('listening at 5000')\r\n})"]}